slide 1
안녕하세요. 아두이노 취약점을 이용한 자율주행 자동차 해킹 실습 연구 발표를 맡은 이가연입니다. 
저희 팀은 인터루드 학회원 김유진, 박채령, 이가연, 한아림, 한재영으로 구성되어있으며 지난 겨울방학동안 프로젝트를 진행했습니다. 

slide 2
발표 순서는 우선 아두이노를 이용해서 자율주행 자동차를 제작한 과정에 대해 소개하겠습니다. 
그리고 아두이노의 취약점을 이용해 임시파일 데이터 조작을 통해 아두이노 보드 공격기법에 대해 다룬 논문을 살펴보며 실습 계획을 구상한 과정을 설명하겠습니다. 
마지막으로 직접 만든 아두이노 자율주행자동차의 센서값을 조작하여 모의해킹 실습을 진행한 결과에 대해 발표하도록 하겠습니다.

slide 3
자율주행자동차 해킹 환경 마련을 위해 아두이노를 이용하여 자율주행자동차를 직접 제작했습니다.

slide 4
아두이노에 대해 간략하게 소개하자면 아두이노는 오픈소스를 기반으로 한 단일 보드 마이크컨트롤러입니다.
가격이 저렴하고 개발환경이 간단해 접근성이 좋다는 장점이 있습니다.
이런 장점으로 사물인터넷, 로봇 등 다양한 하드웨어 조작 프로젝트에 아두이노가 사용되고 있습니다. 

slide 5
자율주행자동차 제작에 사용한 아두이노 센서 중 세가지를 소개하겠습니다. 
우선 자동차 앞의 장애물과의 거리 측정을 위해 초음파 센서를 사용했고, 
스마트폰을 이용해 자율주행자동차를 원격 조종하기 위해 블루투스 모듈을 설치했습니다.
그리고 바퀴를 통해 이동하도록 모터드라이버 쉴드를 설치해 DC모터 제어에 사용했습니다.  

slide 6
자율주행자동차가 초음파 센서를 통해 전방에 가까운 장애물 인식 시 충동하지 않고 회피하도록 하는 코드의 주요부분입니다. Distance Mesurement함수는 앞의 장애물과의 거리를 감지하는 함수로, 센서에서 발생한 값을 저장하고 불러와 거리를 계산합니다. 

slide 7
장애물과의 거리가 확인되면 거리에 따라 자동차가 회피하는 프로그램에 대한 코드입니다. 가까운 거리에 장애물 인식 시 자동차는 우선 멈추고 분기문의 결과에 따라 뒤 또는 좌우로 움직여 장애물을 회피합니다.

slide 8
(영상 재생하며)직접 제작한 아두이노 자율주행자동차가 초음파 센서를 통해 장애물을 인식하고 회피하여 충돌사고 없이 주행하는 모습입니다. 

slide 9
이 자율주행자동차에는 스마트폰으로 원격 조종을 위해 블루투스 모듈을 설치했고, 스마트폰에서 입력한 블루투스 명령을 수신하여 앞뒤좌우로 자동차가 움직이거나 회전하도록 작성한 코드입니다. 

slide 10
스마트폰 원격 조작을 통해 자동차가 움직이는 모습입니다.


slide 11
아두이노로 자율주행 자동차를 제작한 이후, 해킹 실습에 참고하기 위해 관련 논문들을 찾아 정리하고 공부했습니다. 그  중 '임시파일 데이터 조작을 통한 아두이노 보드 공격 기법에 관한 연구'가 저희 프로젝트 주제와 방향성이 같아 해당 논문을 참고하여 실습을 진행하기로 했습니다. 
이 논문에서는 IoT기기로 주로 사용되는 아두이노의 응용프로그램이 호스트컴퓨터에서 컴파일과 로딩이 수행됨에 따라 발생할 수 있는 취약성을 분석하고, 이를 토대로 아두이노 보드의 센서로부터 입력되는 값을 공격자가 임의로 변경할 수 있는 새로운 공격방법을 제안했습니다.

 
slide 12
아두이노 보드의 취약성을 분석하기 위해 아두이노에 업로드되는 프로그램의 빌드 과정을 파악했습니다. 빌드된 실행코드는 업로드 과정을 통해 아두이노 보드에 로딩됩니다. 소스코드가 빌드되면서 실행 가능한 hex코드가 임시저장되며 이를 이용하여 업로딩합니다. 

slide 13
이때 임시저장되는 헥스파일의 위치가 고정되어 있기 때문에 코드를 조작해 공격자가 원하는 내용의 실행코드를 아두이노 보드에 업로드 가능한 취약점이 존재합니다. 

slide 14
이 취약점을 이용해 조작할 수 있는 부분이 센서값을 읽는 기능입니다. analogRead는 보드의 아날로그 핀으로부터 입력받는 값을 처리하는 함수입니다. 이 함수는 다섯가지 종류의 레지스터를 이용해 데이터를 계측하는데요, 이 중 ADCH, ADCL레지스터는 센서를 통해 입력받는 값의 최대값과 최소값이 각각 2진수로 변환되어 16비트로 결합해 함수의 반환값이 됩니다. 

slide 15
예를 들어 ADCH의 값이 2이고 ADCL의 값이 133일때 두 수를 이진수로 변환하여 십육진수의 형태로 결합한 값을 십진수로 환산하면 645라는 함수 반환값이 되어 나옵니다. 
따라서 ADCL, ADCH 두 개의 레지스터 값을 조작하면 아두이노 보드는 센서를 통해 입력된 환경 정보를 오인식하여 잘못된 처리를 수행하게 됩니다.

slide 16
앞서 설명한 센서값 조작 공격을 위해서는 다음의 단계를 거쳐야 합니다.
우선 호스트컴퓨터에 설치된 악성코드는 IDE 모니터링 기능을 통해 아두이노 IDE를 실시간으로 모니터링 해야합니다. 
모니터링 중 컴파일 프로세스가 인식되면 악성코드의 임시파일 변조 기능으로 임시파일을 찾아 데이터를 변조합니다. 

slide 17
데이터 변조 공격 프로그램은 두개의 실행파일로 구성할 수 있습니다. 첫번째는 Dll 인젝션 실행파일로, 아두이노 빌더에 의해 실행되는 프로세스를 실시간으로 모니터링해서 컴파일이 실행되는 순간을 알아냅니다. 컴파일 순간이 포착되면 임시파일 변조 기능을 수행하는 프로그램이 실행되어 호스트컴퓨터에 임시로 생성된 오브젝트 파일을 변조합니다. 변조 내용은 ADCH와 ADCL 레지스터의 값을 0XFF로 모두 초기화 하는 것입니다. 

slide 18
시나리오대로 ADCH, ADCL레지스터 값을 0XFF로 초기화했을때의 오브젝트 파일 변화입니다. 이 그림은 연구에 참고한 논문에서 발췌했습니다.


slide 19
이 공격 방법에서는 아날로그 센서 데이터를 처리하는 analogRead함수를 다루었지만 자이로 센서와 같은 디지털 센서의 입력 정보도 동일한 방법으로 변조할 수 있습니다. 
예를 들어 드론은 자이로센서의 입력값을 처리하기 위해 digitalRead함수를 사용하는데, 이때 사용되는 레지스터 값을 조작하면 드론이 본인의 위치정보를 오인해 정상적인 운행이 불가능해집니다.
이와 같이 함수 조작 공격으로 인해 아두이노 보드는 변조된 센서의 입력정보에 따라 오동작하게 될 수 있고, 이것은 전체 시스템에 심각한 장애를 초래할 수 있습니다.
만약 자율주행자동차의 센서 입력값에 오류가 생기면 교통사고가 발생할 수 있고, 인명 구조 드론의 자이로 센서값이 조작되면 목표 요구호자를 찾을 수 없게 될 수도 있습니다. 
이처럼 작은 센서의 값을 조작하는 것이지만 심각한 문제를 초래할 수 있는 부분이기 때문에 저희는 이런 취약점에 집중해 연구를 진행하기로 했습니다. 

slide 20
저희 팀이 직접 아두이노로 만든 자율주행자동차를 해킹하기 위한 실습을 진행한 내용을 말씀드리겠습니다. 

slide 21
첫번째 실습은 자율주행자동차 코드 조작을 통한 운행 실습입니다. 처음 만든 아두이노 자율주행자동차는 장애물 회피 및 주행 기능이 구현되었지만 보안상 몇가지 문제점들을 갖고있었습니다. 이를 분석해 정리한 결과 다섯개의 문제점을 발견했습니다.
첫 번째는 장애물을 만나면 자동차가 무작위로 방향을 변경한다는 것입니다. 전방 장애물 인식 시 좌,우,뒤 세 방향 중 랜덤 방향으로 움직여 장애물을 회피하기 때문에 피하는 과정에서 주변의 다른 장애물과 충돌할 가능성이 존재합니다.
두 번째는 장애물을 기억하는 메모리가 없다는 것입니다. 이전에 만나 회피한 장애물의 위치정보를 별도로 저장하지 않아 자동차가 같은 방향으로 계속 회전을 시도하거나 주변 환경을 효과적으로 탐색하지 못하는 문제가 있었습니다.

slide 22
세 번째는 거리 측정에 대한 보정이 없다는 것입니다. 초음파 센서를 이용해 주변의 장애물과의 거리를 판단해 회피하지만 센서값을 읽어올 때 보정이나 유효성 검사를 실시하지 않습니다. 이 때문에 거리가 부정확하게 측정되거나 장애물 회피 작업이 원활하게 이루어지지 않을 가능성이 존재합니다. 
네 번째로 오류 처리나 접근 가능한 장애물에 대한 처리는 포함하고 있지 않습니다.
마지막으로 센서의 인지 범위가 제한되어 있다는 것입니다. 약 300cm로 제한된 범위 내의 장애물과의 거리만 계산할 수 있기 대문에 더 멀리서 빠르게 다가오는 장애물과의 충돌이 발생할 가능성이 있습니다.

slide 23
이런 문제 악용하면 센서 값과 무관하게 자율주행자동차의 오작동을 야기할 수 있었습니다. 예를 들어 장애물과의 거리가 0일때 후진하도록 조작해 장애물 인지 기능을 무력화하고 사고를 유발할 수 있습니다. 

slide 24
해당 악용 코드를 적용한 자동차입니다. 처음에 잘 기능하던 장애물 회피가 정상적으로 이루어지지 않고 있습니다.

slide 25
Distance_Measurement함수의 리턴값을 항상 400이 되도록 코드를 조작하면 장애물과의 실제 거리를 정확하게 측정하여 반환하지 못해 장애물에 그대로 충돌하게 됩니다. 

slide 26
장애물이 가까이 와도 센서가 인식하는 거리는 400이기 때문에 멀리 있는 물체로 오인하고 장애물에 충돌하는 모습입니다.

slide 27
이런 프로그램상의 헛점을 통한 비정상 주행을 방지하고자 코드를 보완했습니다. 장애물을 인식하고 자율주행자동차가 방향을 변경하기 전 앞에 장애물이 있는지 검사하는 과정과 한번 피한 장애물의 위치를 저장하는 코드를 추가했습니다. 이 과정을 통해 더욱 완성도 있는 자율주행자동차를 구성할 수 있었습니다.

slide 28
왼쪽 영상은 코드 보완 후 장애물 회피 방향 설정 전 전방의 다른 장애물을 탐지하고 장애물이 없는 방향으로 전환하여 주행하는 영상입니다.
오른쪽 영상도 코드 보완 후 한번 회피한 장애물의 위치를 기억해 해당 장애물 근처로는 주행하지 않는 모습입니다. 

slide 29
본 연구에 참고한 논문의 공격방식을 모티브로 한 해킹 시나리오를 구성하기 위해 공격 대상이 되는 임시파일의 위치를 확인하고 분석한 결과입니다. 값을 조작하는 대상이 되는 것은 컴파일 직후 생성되는 오브젝트 파일이고, 센서값을 저장하는 레지스트리값은 아두이노 임시파일 디렉토리의 헥스 파일에 저장된다는 것을 분석을 통해 찾았습니다. 

slide 30
프로젝트 기간동안 팀원들이 최선을 다했지만, 앞으로도 더 진행하고 싶은 내용이 있어 소개하면서 발표를 마무리하겠습니다.
우선 직접 제작한 아두이노 자율주행자동차의 코드를 보완하고 알고리즘을 발전시켜 보다 정교한 자율주행자동차를 만들어보고자 합니다.
그리고 자율주행자동차 센서에 사용되는 레지스터 값을 더욱 세밀하게 분석하고 dll injection을 통해 임시파일 데이터 값을 조작해 해킹 후 이것을 패치하는 방안까지 찾아볼 계획입니다.  

slide 31
이상으로 인터루드 소속 swuIOT팀의 아두이노 취약점을 이용한 자율주행 자동차 해킹 실습 연구 발표를 마치겠습니다. 감사합니다. 

